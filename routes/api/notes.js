//Imports - The file imports necessary packages and functions

//express.Router() - Creates a router instance.
const notes = require("express").Router();
//uuidv4 - Generates unique IDs for notes.
const { v4: uuidv4 } = require("uuid");
//fileRead, fileEdit, readPlusEdit - Functions from "../helpers/utils" for reading, editing, and appending data to a file.
const { fileRead, fileEdit, readPlusEdit } = require("../helpers/utils");

//Router Definition

//The notes variable is assigned the result of require("express").Router(), which creates a router instance.
//Routes
//GET Route - Responds to GET requests to the root endpoint("/").It reads data from the "./db/db.json" file and sends it as a JSON response.
notes.get("/", (req, res) => {
    fileRead("./db/db.json").then((data) => res.json(JSON.parse(data)));
});
//POST Route - Handles POST requests to the root endpoint("/").It expects a JSON body with title and text properties.It creates a new note object with a unique ID generated by uuidv4(), appends this note to the JSON data in the "./db/db.json" file using the readPlusEdit function, and sends a success message as a JSON response.
notes.post("/", (req, res) => {
    const { title, text } = req.body;
    if (req.body) {
        const newNote = {
            title,
            text,
            id: uuidv4(),
        };
        readPlusEdit(newNote, "./db/db.json");
        res.json(`Note added successfully`);
    } else {
        res.error("Error in adding note");
    }
});

//DELETE Route - Handles DELETE requests to the "/:id" endpoint, where ":id" is a dynamic parameter representing the ID of the note to be deleted.It reads data from the "./db/db.json" file, filters out the note with the specified ID, writes the filtered data back to the file using the fileEdit function, and sends a success message as a JSON response.
notes.delete("/:id", (req, res) => {
    const noteId = req.params.id;
    fileRead("./db/db.json")
        .then((data) => JSON.parse(data))
        .then((json) => {           
            const result = json.filter((note) => note.id !== noteId);           
            fileEdit("./db/db.json", result);
            res.json(`Item ${noteId} has been 🗑️ discarded.`);
        });
});

//Exports: The notes router is exported so that it can be used by other parts of the application.
module.exports = notes;